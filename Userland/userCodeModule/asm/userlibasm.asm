
GLOBAL _print
GLOBAL _read
GLOBAL _draw
GLOBAL _screenData
GLOBAL _sleep
GLOBAL _getClock
GLOBAL _getRegs
GLOBAL _changeSize
GLOBAL _opError 
GLOBAL _divError
GLOBAL _beep
GLOBAL _create_mm
GLOBAL _alloc
GLOBAL _free
GLOBAL _status_count
GLOBAL _create_process
GLOBAL _kill_process
GLOBAL _block_process
GLOBAL _unblock_process
GLOBAL _get_proc_list
GLOBAL _get_pid

section .text

;screen functions

;================================================================================================================================
;_print imprime en pantalla un string null terminated
;int 80h para usar la syscall
;IN: rdi=puntero a str; rsi=strlen; rdx: fd-> 1 STDOUT -> 2 STDERROR
;================================================================================================================================
;================================================================================================================================
_print:
    push rbp
	mov rbp, rsp

    mov rax, 1
    int 80h

	mov rsp, rbp
	pop rbp
	ret

;================================================================================================================================
;_read lee de entrada standard
;int 80h para usar la syscall
;IN: rdi=puntero a str; rsi=strlen; rdx: fd-> 1 STDIN -> 3 STDKEYS -> 4 STDLAST
;================================================================================================================================
;================================================================================================================================
_read:
    push rbp
	mov rbp, rsp

    mov rax, 0  ;sys_read ID
    int 80h;

	mov rsp, rbp
	pop rbp
	ret

;================================================================================================================================
;_getClock 
;int 80h para usar la syscall
;IN: rdi=* hrs;rsi=* min;rdx=* seg;
;================================================================================================================================
;================================================================================================================================
_getClock:
	push rbp
	mov rbp, rsp

    mov rax, 0x4e   ;sys_getClock ID
    int 80h;

	mov rsp, rbp
	pop rbp
	ret
;================================================================================================================================
;_draw dibuja en pantalla un bitmap (uint16_t width)
;int 80h para usar la syscall
;IN: rdi=bitmap; rsi=color; rdx: bitmap height; rcx: init_x position; r8: init_y position
;================================================================================================================================
;================================================================================================================================
_draw:
    push rbp
    mov rbp, rsp

    mov rax, 0x77   ;sys_draw ID

    int 80h     ;syscall 

.end:
    mov rsp, rbp
    pop rbp
    ret
;================================================================================================================================

;================================================================================================================================
;_sleep duerme
;int 80h para usar la syscall
;IN: rdi=amount; rsi=unit;
;================================================================================================================================
;================================================================================================================================
_sleep:
    push rbp
    mov rbp, rsp

    mov rax, 0x23   ;sys_sleep ID

    int 80h     ;syscall 

.end:
    mov rsp, rbp
    pop rbp
    ret
	mov rsp, rbp
	pop rbp
	ret

;================================================================================================================================
;_getRegs 
;int 80h para usar la syscall
;IN: long *;
;================================================================================================================================
;================================================================================================================================
_getRegs:
	push rbp
	mov rbp, rsp

    mov rax, 0x78   ;sys_getRegs ID
    int 80h;
	mov rsp, rbp
	pop rbp
	ret

;================================================================================================================================
;_screenData devuelve informacion del videoDriver
;int 80h para usar la syscall
;IN: rdi=screenHeight; rsi=screenWidth; rdx:fontSize; rcx: drawSize;
;================================================================================================================================
;================================================================================================================================
_screenData:
    push rbp
    mov rbp, rsp

    mov rax, 0x83   ;sys_screenData ID

    int 80h     ;syscall 

.end:
    mov rsp, rbp
    pop rbp
    ret
;================================================================================================================================

;================================================================================================================================
;_changeSize cambia el tamaÃ±o de font o draw en kernel
;int 80h para usar la syscall
;IN: rdi=newSize; rsi=fd 1=> font 2=> draw
;================================================================================================================================
;================================================================================================================================
_changeSize:
    push rbp
    mov rbp, rsp

    mov rax, 0x93   ;sys_changeSize ID

    int 80h     ;syscall 

.end:
    mov rsp, rbp
    pop rbp
    ret
;================================================================================================================================

;================================================================================================================================
;_beep hace ruido!
; param 1 es frecuencia
; param 2 es duracion en milisegundos
;================================================================================================================================

_beep:
    push rbp
    mov rbp, rsp

    mov rax, 0x84   ;sys_speak ID

    int 80h         ;syscall 

.end:
    mov rsp, rbp
    pop rbp
    ret
    

;================================================================================================================================



_divError
    int 0
    ret


;================================================================================================================================
;_opError 
;ocasiona una invalid opcode exception
;================================================================================================================================
;================================================================================================================================
_opError:
    mov cr6, rax
    ret         ; ironico que este ese ret pero bueno, nunca sobra 

;================================================================================================================================

;================================================================================================================================
;_create_mm inicializa el memory manager o buddy
;================================================================================================================================

_create_mm:
    push rbp
    mov rbp, rsp

    mov rax, 0x30   ;sys_create_mm

    int 80h         ;syscall 

.end:
    mov rsp, rbp
    pop rbp
    ret
    

;================================================================================================================================

;================================================================================================================================
;_alloc busca y da memoria para los prcoesos que la pidan
;================================================================================================================================

_alloc:
    push rbp
    mov rbp, rsp

    mov rax, 0x31   ;sys_alloc

    int 80h         ;syscall 

.end:
    mov rsp, rbp
    pop rbp
    ret
    

;================================================================================================================================

;================================================================================================================================
;_free llibera memoria
;================================================================================================================================

_free:
    push rbp
    mov rbp, rsp

    mov rax, 0x32   ;sys_free

    int 80h         ;syscall 

.end:
    mov rsp, rbp
    pop rbp
    ret
    

;================================================================================================================================

;================================================================================================================================
;_status_count devuelve los datos de la memoria en un array
;================================================================================================================================

_status_count:
    push rbp
    mov rbp, rsp

    mov rax, 0x33   ;sys_status_count

    int 80h         ;syscall 

.end:
    mov rsp, rbp
    pop rbp
    ret
    

;================================================================================================================================

;================================================================================================================================
;_create_process crea un proceso nuevo
;================================================================================================================================

_create_process:
    push rbp
    mov rbp, rsp

    mov rax, 0xA0   ;sys_create_process

    int 80h         ;syscall 

.end:
    mov rsp, rbp
    pop rbp
    ret
    

;================================================================================================================================

;================================================================================================================================
;_kill_process mata un proceso a partir de su PID
;================================================================================================================================

_kill_process:
    push rbp
    mov rbp, rsp

    mov rax, 0xA1   ;sys_kill_process

    int 80h         ;syscall 

.end:
    mov rsp, rbp
    pop rbp
    ret
    

;================================================================================================================================

;================================================================================================================================
;_block_process bloquea un proceso a partir de su PID
;================================================================================================================================

_block_process:
    push rbp
    mov rbp, rsp

    mov rax, 0xA2   ;sys_block_process

    int 80h         ;syscall 

.end:
    mov rsp, rbp
    pop rbp
    ret
    

;================================================================================================================================

;================================================================================================================================
;_unblock_process desbloquea un proceso a partir de su PID
;================================================================================================================================

_unblock_process:
    push rbp
    mov rbp, rsp

    mov rax, 0xA3   ;sys_unblock_process

    int 80h         ;syscall 

.end:
    mov rsp, rbp
    pop rbp
    ret
    

;================================================================================================================================

;================================================================================================================================
;_get_proc_list obtiene los valores de los PIDS, ParentPIDs, status, nombre de los procesos, junto con su stack pointer
;================================================================================================================================

_get_proc_list:
    push rbp
    mov rbp, rsp

    mov rax, 0xA4   ;sys_get_proc_list

    int 80h         ;syscall 

.end:
    mov rsp, rbp
    pop rbp
    ret
    

;================================================================================================================================

;================================================================================================================================
;_get_pid retorna el PID del pcs que esta corriendo
;================================================================================================================================

_get_pid:
    push rbp
    mov rbp, rsp

    mov rax, 0xA5   ;sys_get_pid

    int 80h         ;syscall 

.end:
    mov rsp, rbp
    pop rbp
    ret
    

;================================================================================================================================

section .bss
    newLineString db "hello" 
